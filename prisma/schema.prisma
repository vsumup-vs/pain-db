generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String             @id @default(cuid())
  email                  String             @unique
  passwordHash           String?
  firstName              String?
  lastName               String?
  avatar                 String?
  phone                  String?
  isActive               Boolean            @default(true)
  emailVerified          DateTime?
  mfaEnabled             Boolean            @default(false)
  mfaSecret              String?
  backupCodes            String[]           @default([])
  lastLoginAt            DateTime?
  passwordResetToken     String?            @unique
  passwordResetExpires   DateTime?
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  isPlatformAdmin        Boolean            @default(false)
  claimedAlerts          Alert[]            @relation("ClaimedAlerts")
  escalatedAlerts        Alert[]            @relation("EscalatedAlerts")
  resolvedAlerts         Alert[]            @relation("ResolvedAlerts")
  snoozedAlerts          Alert[]            @relation("SnoozedAlerts")
  suppressedAlerts       Alert[]            @relation("SuppressedAlerts")
  auditLogs              AuditLog[]
  attestedEncounterNotes EncounterNote[]    @relation("AttestedEncounterNotes")
  refreshTokens          RefreshToken[]
  savedViews             SavedView[]
  socialAccounts         SocialAccount[]
  tasksAssignedBy        Task[]             @relation("TaskAssignedBy")
  tasksAssignedTo        Task[]             @relation("TaskAssignedTo")
  tasksCompleted         Task[]             @relation("TaskCompletedBy")
  userOrganizations      UserOrganization[]

  @@index([email])
  @@index([isActive])
  @@index([lastLoginAt])
  @@map("users")
}

model Organization {
  id                    String                @id @default(cuid())
  name                  String                @unique
  type                  OrganizationType
  email                 String?               @unique
  phone                 String?
  address               String?
  website               String?
  isActive              Boolean               @default(true)
  settings              Json?
  logoUrl               String?
  brandingConfig        Json?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  subscriptionStatus    SubscriptionStatus?   @default(TRIAL)
  subscriptionTier      SubscriptionTier?     @default(BASIC)
  subscriptionStartDate DateTime?
  subscriptionEndDate   DateTime?
  trialEndsAt           DateTime?
  maxUsers              Int?                  @default(10)
  maxPatients           Int?                  @default(100)
  maxClinicians         Int?                  @default(10)
  billingContactName    String?
  billingContactEmail   String?
  billingContactPhone   String?
  onboardedBy           String?
  onboardedAt           DateTime?
  notes                 String?
  alertRules            AlertRule[]
  assessmentTemplates   AssessmentTemplate[]
  carePrograms          CareProgram[]
  clinicians            Clinician[]
  conditionPresets      ConditionPreset[]
  encounterNotes        EncounterNote[]
  enrollments           Enrollment[]
  metricDefinitions     MetricDefinition[]
  patients              Patient[]
  savedViews            SavedView[]
  scheduledAssessments  ScheduledAssessment[]
  tasks                 Task[]
  userOrganizations     UserOrganization[]

  @@index([name])
  @@index([type])
  @@index([isActive])
  @@map("organizations")
}

model UserOrganization {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           UserRole
  permissions    Permission[]
  isActive       Boolean      @default(true)
  joinedAt       DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
  @@index([role])
  @@map("user_organizations")
}

model SocialAccount {
  id           String         @id @default(cuid())
  userId       String
  provider     SocialProvider
  providerId   String
  email        String?
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerId])
  @@index([userId])
  @@map("social_accounts")
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

model CareProgram {
  id             String       @id @default(cuid())
  organizationId String
  name           String
  type           ProgramType
  description    String?
  isActive       Boolean      @default(true)
  settings       Json?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  enrollments    Enrollment[]

  @@unique([organizationId, name])
  @@index([organizationId])
  @@index([type])
  @@index([isActive])
  @@map("care_programs")
}

model AuditLog {
  id             String   @id @default(cuid())
  userId         String?
  organizationId String?
  action         String
  resource       String?
  resourceId     String?
  ipAddress      String?
  userAgent      String?
  oldValues      Json?
  newValues      Json?
  metadata       Json?
  hipaaRelevant  Boolean  @default(false)
  createdAt      DateTime @default(now())
  user           User?    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@index([hipaaRelevant])
  @@map("audit_logs")
}

model Patient {
  id                   String                @id @default(cuid())
  organizationId       String
  firstName            String
  lastName             String
  dateOfBirth          DateTime
  gender               String?
  email                String?
  phone                String?
  address              String?
  emergencyContact     String?
  medicalRecordNumber  String?               @unique
  insuranceInfo        Json?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  alerts               Alert[]
  assessmentReminders  AssessmentReminder[]
  assessments          Assessment[]
  encounterNotes       EncounterNote[]
  enrollments          Enrollment[]
  observations         Observation[]
  patientMedications   PatientMedication[]
  organization         Organization          @relation(fields: [organizationId], references: [id])
  scheduledAssessments ScheduledAssessment[]
  tasks                Task[]
  timeLogs             TimeLog[]

  @@unique([organizationId, email])
  @@index([organizationId])
  @@index([firstName, lastName])
  @@index([dateOfBirth])
  @@index([email])
  @@map("patients")
}

model Clinician {
  id                                                String                @id @default(cuid())
  organizationId                                    String
  firstName                                         String
  lastName                                          String
  email                                             String                @unique
  phone                                             String?
  address                                           String?
  specialization                                    String?
  department                                        String?
  credentials                                       String?
  createdAt                                         DateTime              @default(now())
  updatedAt                                         DateTime              @updatedAt
  emergencyContact                                  Json?                 @map("emergency_contact")
  licenseNumber                                     String?               @map("license_number")
  npiNumber                                         String?               @map("npi_number")
  alerts                                            Alert[]
  assessments                                       Assessment[]
  organization                                      Organization          @relation(fields: [organizationId], references: [id])
  encounterNotes                                    EncounterNote[]
  enrollments                                       Enrollment[]
  observations                                      Observation[]
  observations_observations_reviewed_byToclinicians Observation[]         @relation("observations_reviewed_byToclinicians")
  scheduledAssessmentsCompleted                     ScheduledAssessment[] @relation("CompletedBy")
  scheduledAssessmentsScheduled                     ScheduledAssessment[] @relation("ScheduledBy")
  timeLogs                                          TimeLog[]

  @@index([organizationId])
  @@index([firstName, lastName])
  @@index([specialization])
  @@index([department])
  @@map("clinicians")
}

model Enrollment {
  id                   String                @id @default(cuid())
  organizationId       String
  patientId            String
  clinicianId          String
  careProgramId        String
  conditionPresetId    String
  status               EnrollmentStatus      @default(PENDING)
  startDate            DateTime
  endDate              DateTime?
  notes                String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  billingProgramId     String?
  billingEligibility   Json?
  assessmentReminders  AssessmentReminder[]
  billingProgram       BillingProgram?       @relation(fields: [billingProgramId], references: [id])
  careProgram          CareProgram           @relation(fields: [careProgramId], references: [id])
  clinician            Clinician             @relation(fields: [clinicianId], references: [id])
  conditionPreset      ConditionPreset       @relation(fields: [conditionPresetId], references: [id])
  organization         Organization          @relation(fields: [organizationId], references: [id])
  patient              Patient               @relation(fields: [patientId], references: [id])
  observations         Observation[]
  scheduledAssessments ScheduledAssessment[]
  timeLogs             TimeLog[]

  @@unique([patientId, careProgramId, startDate])
  @@index([organizationId])
  @@index([patientId])
  @@index([clinicianId])
  @@index([status])
  @@index([startDate])
  @@index([billingProgramId])
  @@map("enrollments")
}

model MetricDefinition {
  id               String                   @id @default(cuid())
  key              String
  displayName      String
  description      String?
  unit             String?
  valueType        ValueType
  category         String?
  isStandardized   Boolean                  @default(false)
  scaleMin         Decimal?
  scaleMax         Decimal?
  decimalPrecision Int?
  options          Json?
  normalRange      Json?
  standardCoding   Json?
  validationInfo   Json?
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @updatedAt
  organizationId   String?
  sourceMetricId   String?
  templateItems    AssessmentTemplateItem[]
  organization     Organization?            @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  sourceMetric     MetricDefinition?        @relation("MetricClones", fields: [sourceMetricId], references: [id])
  clonedMetrics    MetricDefinition[]       @relation("MetricClones")
  observations     Observation[]

  @@unique([organizationId, key])
  @@index([organizationId])
  @@index([key])
  @@index([displayName])
  @@index([category])
  @@index([valueType])
  @@index([isStandardized])
  @@index([sourceMetricId])
  @@map("metric_definitions")
}

model Observation {
  id                                              String             @id @default(cuid())
  patientId                                       String
  clinicianId                                     String?
  metricId                                        String
  value                                           Json
  unit                                            String?
  source                                          SourceType         @default(MANUAL)
  context                                         ObservationContext @default(CLINICAL_MONITORING)
  notes                                           String?
  recordedAt                                      DateTime           @default(now())
  createdAt                                       DateTime           @default(now())
  updatedAt                                       DateTime           @updatedAt
  organizationId                                  String
  enrollmentId                                    String?
  review_status                                   ReviewStatus       @default(PENDING)
  reviewed_at                                     DateTime?
  reviewed_by                                     String?
  review_method                                   ReviewMethod?
  review_notes                                    String?
  related_alert_id                                String?
  alerts_alerts_observation_idToobservations      Alert[]            @relation("alerts_observation_idToobservations")
  clinician                                       Clinician?         @relation(fields: [clinicianId], references: [id])
  enrollment                                      Enrollment?        @relation(fields: [enrollmentId], references: [id], map: "observations_enrollmentid_fkey")
  metric                                          MetricDefinition   @relation(fields: [metricId], references: [id])
  patient                                         Patient            @relation(fields: [patientId], references: [id])
  alerts_observations_related_alert_idToalerts    Alert?             @relation("observations_related_alert_idToalerts", fields: [related_alert_id], references: [id])
  clinicians_observations_reviewed_byToclinicians Clinician?         @relation("observations_reviewed_byToclinicians", fields: [reviewed_by], references: [id])

  @@unique([patientId, metricId, recordedAt])
  @@index([organizationId])
  @@index([patientId])
  @@index([metricId])
  @@index([recordedAt])
  @@index([source])
  @@index([context])
  @@index([enrollmentId], map: "observations_enrollmentid_idx")
  @@index([related_alert_id])
  @@index([review_status])
  @@index([reviewed_by])
  @@map("observations")
}

model AssessmentTemplate {
  id                       String                    @id @default(cuid())
  name                     String
  description              String?
  questions                Json
  scoring                  Json?
  isStandardized           Boolean                   @default(false)
  category                 String?
  standardCoding           Json?
  validationInfo           Json?
  scoringInfo              Json?
  copyrightInfo            String?
  clinicalUse              String?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  organizationId           String?
  sourceTemplateId         String?
  assessmentReminders      AssessmentReminder[]
  items                    AssessmentTemplateItem[]
  organization             Organization?             @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  sourceTemplate           AssessmentTemplate?       @relation("TemplateClones", fields: [sourceTemplateId], references: [id])
  clonedTemplates          AssessmentTemplate[]      @relation("TemplateClones")
  assessments              Assessment[]
  conditionPresetTemplates ConditionPresetTemplate[]
  scheduledAssessments     ScheduledAssessment[]

  @@unique([organizationId, name])
  @@index([organizationId])
  @@index([name])
  @@index([category])
  @@index([isStandardized])
  @@index([sourceTemplateId])
  @@map("assessment_templates")
}

model AssessmentTemplateItem {
  id                 String             @id @default(cuid())
  templateId         String
  metricDefinitionId String
  displayOrder       Int                @default(0)
  isRequired         Boolean            @default(false)
  helpText           String?
  defaultValue       String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  metricDefinition   MetricDefinition   @relation(fields: [metricDefinitionId], references: [id])
  template           AssessmentTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([templateId, metricDefinitionId])
  @@index([templateId])
  @@index([metricDefinitionId])
  @@index([displayOrder])
  @@map("assessment_template_items")
}

model Assessment {
  id                  String               @id @default(cuid())
  patientId           String
  clinicianId         String?
  templateId          String
  responses           Json
  score               Json?
  completedAt         DateTime?
  notes               String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  clinician           Clinician?           @relation(fields: [clinicianId], references: [id])
  patient             Patient              @relation(fields: [patientId], references: [id])
  template            AssessmentTemplate   @relation(fields: [templateId], references: [id])
  scheduledAssessment ScheduledAssessment? @relation("CompletedScheduledAssessment")
  tasks               Task[]

  @@index([patientId])
  @@index([templateId])
  @@index([completedAt])
  @@index([createdAt])
  @@map("assessments")
}

model ScheduledAssessment {
  id                    String                       @id @default(cuid())
  organizationId        String
  patientId             String
  enrollmentId          String
  templateId            String
  conditionPresetId     String?
  frequency             ScheduledAssessmentFrequency
  dueDate               DateTime
  scheduledBy           String?
  status                ScheduledAssessmentStatus    @default(PENDING)
  priority              Int                          @default(0)
  isRequired            Boolean                      @default(true)
  completedAt           DateTime?
  completedBy           String?
  completedAssessmentId String?                      @unique
  notificationsSent     Int                          @default(0)
  lastNotificationAt    DateTime?
  notes                 String?
  metadata              Json?
  createdAt             DateTime                     @default(now())
  updatedAt             DateTime                     @updatedAt
  completedAssessment   Assessment?                  @relation("CompletedScheduledAssessment", fields: [completedAssessmentId], references: [id])
  completedByClinician  Clinician?                   @relation("CompletedBy", fields: [completedBy], references: [id])
  conditionPreset       ConditionPreset?             @relation(fields: [conditionPresetId], references: [id])
  enrollment            Enrollment                   @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  organization          Organization                 @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  patient               Patient                      @relation(fields: [patientId], references: [id], onDelete: Cascade)
  scheduledByClinician  Clinician?                   @relation("ScheduledBy", fields: [scheduledBy], references: [id])
  template              AssessmentTemplate           @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([patientId])
  @@index([enrollmentId])
  @@index([templateId])
  @@index([status])
  @@index([dueDate])
  @@index([frequency])
  @@index([priority])
  @@index([scheduledBy])
  @@index([completedBy])
  @@map("scheduled_assessments")
}

model TimeLog {
  id           String        @id @default(cuid())
  patientId    String
  clinicianId  String
  activity     String
  duration     Int
  cptCode      CPTCode?
  notes        String?
  billable     Boolean       @default(true)
  loggedAt     DateTime      @default(now())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  autoStarted  Boolean       @default(false)
  source       TimeLogSource @default(MANUAL)
  startedAt    DateTime?
  enrollmentId String?
  clinician    Clinician     @relation(fields: [clinicianId], references: [id])
  enrollment   Enrollment?   @relation(fields: [enrollmentId], references: [id], map: "time_logs_enrollmentid_fkey")
  patient      Patient       @relation(fields: [patientId], references: [id])

  @@index([patientId])
  @@index([clinicianId])
  @@index([loggedAt])
  @@index([billable])
  @@index([cptCode])
  @@index([source])
  @@index([autoStarted])
  @@index([enrollmentId], map: "time_logs_enrollmentid_idx")
  @@map("time_logs")
}

model ConditionPreset {
  id                   String                     @id @default(cuid())
  name                 String
  defaultProtocolId    String?
  description          String?
  isActive             Boolean                    @default(true)
  isStandardized       Boolean                    @default(false)
  category             String?
  standardCoding       Json?
  clinicalGuidelines   Json?
  createdAt            DateTime                   @default(now())
  updatedAt            DateTime                   @updatedAt
  organizationId       String?
  sourcePresetId       String?
  alertRules           ConditionPresetAlertRule[]
  diagnoses            ConditionPresetDiagnosis[]
  templates            ConditionPresetTemplate[]
  enrollments          Enrollment[]
  organization         Organization?              @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  sourcePreset         ConditionPreset?           @relation("PresetClones", fields: [sourcePresetId], references: [id])
  clonedPresets        ConditionPreset[]          @relation("PresetClones")
  scheduledAssessments ScheduledAssessment[]

  @@unique([organizationId, name])
  @@index([organizationId])
  @@index([name])
  @@index([category])
  @@index([isStandardized])
  @@index([isActive])
  @@index([sourcePresetId])
  @@map("condition_presets")
}

model ConditionPresetDiagnosis {
  id                String          @id @default(cuid())
  conditionPresetId String
  icd10             String
  snomed            String?
  label             String
  isPrimary         Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt
  conditionPreset   ConditionPreset @relation(fields: [conditionPresetId], references: [id], onDelete: Cascade)

  @@unique([conditionPresetId, icd10])
  @@index([conditionPresetId])
  @@index([icd10])
  @@index([isPrimary])
  @@map("condition_preset_diagnoses")
}

model ConditionPresetTemplate {
  id                String             @id @default(cuid())
  conditionPresetId String
  templateId        String
  isRequired        Boolean            @default(true)
  frequency         String?
  displayOrder      Int                @default(0)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt
  conditionPreset   ConditionPreset    @relation(fields: [conditionPresetId], references: [id], onDelete: Cascade)
  template          AssessmentTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@unique([conditionPresetId, templateId])
  @@index([conditionPresetId])
  @@index([templateId])
  @@index([displayOrder])
  @@map("condition_preset_templates")
}

model AlertRule {
  id               String                     @id @default(cuid())
  name             String
  description      String?
  conditions       Json
  actions          Json
  isActive         Boolean                    @default(true)
  isStandardized   Boolean                    @default(false)
  category         String?
  severity         Severity?
  priority         Int                        @default(0)
  standardCoding   Json?
  clinicalEvidence Json?
  createdAt        DateTime                   @default(now())
  updatedAt        DateTime                   @updatedAt
  organizationId   String?
  sourceRuleId     String?
  organization     Organization?              @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  sourceRule       AlertRule?                 @relation("RuleClones", fields: [sourceRuleId], references: [id])
  clonedRules      AlertRule[]                @relation("RuleClones")
  alerts           Alert[]
  conditionPresets ConditionPresetAlertRule[]

  @@unique([organizationId, name])
  @@index([organizationId])
  @@index([name])
  @@index([category])
  @@index([isActive])
  @@index([isStandardized])
  @@index([severity])
  @@index([sourceRuleId])
  @@map("alert_rules")
}

model ConditionPresetAlertRule {
  id                String          @id @default(cuid())
  conditionPresetId String
  alertRuleId       String
  isEnabled         Boolean         @default(true)
  priority          Int             @default(0)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt
  rule              AlertRule       @relation(fields: [alertRuleId], references: [id], onDelete: Cascade)
  conditionPreset   ConditionPreset @relation(fields: [conditionPresetId], references: [id], onDelete: Cascade)

  @@unique([conditionPresetId, alertRuleId])
  @@index([conditionPresetId])
  @@index([alertRuleId])
  @@map("condition_preset_alert_rules")
}

model Alert {
  id                                                 String            @id @default(cuid())
  ruleId                                             String
  patientId                                          String
  clinicianId                                        String?
  severity                                           Severity
  status                                             AlertStatus       @default(PENDING)
  message                                            String
  data                                               Json?
  triggeredAt                                        DateTime          @default(now())
  acknowledgedAt                                     DateTime?
  resolvedAt                                         DateTime?
  organizationId                                     String
  claimedAt                                          DateTime?
  claimedById                                        String?
  priorityRank                                       Int?
  riskScore                                          Float?
  slaBreachTime                                      DateTime?
  interventionType                                   InterventionType?
  patientOutcome                                     PatientOutcome?
  resolutionNotes                                    String?
  resolvedById                                       String?
  timeSpentMinutes                                   Int?
  isSuppressed                                       Boolean           @default(false)
  snoozedAt                                          DateTime?
  snoozedById                                        String?
  snoozedUntil                                       DateTime?
  suppressNotes                                      String?
  suppressReason                                     SuppressReason?
  suppressedAt                                       DateTime?
  suppressedById                                     String?
  escalatedAt                                        DateTime?
  escalatedToId                                      String?
  escalationLevel                                    Int?
  escalationReason                                   String?
  isEscalated                                        Boolean           @default(false)
  observation_id                                     String?
  claimedBy                                          User?             @relation("ClaimedAlerts", fields: [claimedById], references: [id])
  clinician                                          Clinician?        @relation(fields: [clinicianId], references: [id])
  escalatedTo                                        User?             @relation("EscalatedAlerts", fields: [escalatedToId], references: [id])
  observations_alerts_observation_idToobservations   Observation?      @relation("alerts_observation_idToobservations", fields: [observation_id], references: [id])
  patient                                            Patient           @relation(fields: [patientId], references: [id])
  resolvedBy                                         User?             @relation("ResolvedAlerts", fields: [resolvedById], references: [id])
  rule                                               AlertRule         @relation(fields: [ruleId], references: [id])
  snoozedBy                                          User?             @relation("SnoozedAlerts", fields: [snoozedById], references: [id])
  suppressedBy                                       User?             @relation("SuppressedAlerts", fields: [suppressedById], references: [id])
  encounterNotes                                     EncounterNote[]
  observations_observations_related_alert_idToalerts Observation[]     @relation("observations_related_alert_idToalerts")
  tasks                                              Task[]

  @@index([organizationId])
  @@index([patientId])
  @@index([ruleId])
  @@index([status])
  @@index([severity])
  @@index([triggeredAt])
  @@index([riskScore])
  @@index([priorityRank])
  @@index([slaBreachTime])
  @@index([claimedById])
  @@index([snoozedUntil])
  @@index([isSuppressed])
  @@index([snoozedById])
  @@index([suppressedById])
  @@index([isEscalated])
  @@index([escalatedToId])
  @@index([escalationLevel])
  @@index([observation_id])
  @@map("alerts")
}

model Drug {
  id                 String              @id @default(cuid())
  name               String              @unique
  genericName        String?
  brandName          String?
  dosageForm         String?
  strength           String?
  manufacturer       String?
  ndcNumber          String?             @unique
  description        String?
  sideEffects        String[]
  contraindications  String[]
  interactions       String[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  patientMedications PatientMedication[]

  @@index([name])
  @@index([genericName])
  @@index([brandName])
  @@map("drugs")
}

model PatientMedication {
  id                  String                @id @default(cuid())
  patientId           String
  drugId              String
  prescribedBy        String?
  dosage              String
  frequency           String
  route               String?
  startDate           DateTime
  endDate             DateTime?
  isActive            Boolean               @default(true)
  instructions        String?
  notes               String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  medicationAdherence MedicationAdherence[]
  drug                Drug                  @relation(fields: [drugId], references: [id])
  patient             Patient               @relation(fields: [patientId], references: [id])

  @@unique([patientId, drugId, startDate])
  @@index([patientId])
  @@index([drugId])
  @@index([isActive])
  @@index([startDate])
  @@map("patient_medications")
}

model MedicationAdherence {
  id                  String            @id @default(cuid())
  patientMedicationId String
  takenAt             DateTime
  doseTaken           String?
  adherenceScore      Float?
  notes               String?
  recordedAt          DateTime          @default(now())
  patientMedication   PatientMedication @relation(fields: [patientMedicationId], references: [id])

  @@unique([patientMedicationId, takenAt])
  @@index([patientMedicationId])
  @@index([takenAt])
  @@index([adherenceScore])
  @@map("medication_adherence")
}

model Task {
  id              String       @id @default(cuid())
  taskType        TaskType
  title           String       @db.VarChar(200)
  description     String?
  status          TaskStatus   @default(PENDING)
  priority        TaskPriority @default(MEDIUM)
  dueDate         DateTime
  completedAt     DateTime?
  completionNotes String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  assignedToId    String
  assignedById    String
  completedById   String?
  patientId       String
  alertId         String?
  assessmentId    String?
  organizationId  String
  alert           Alert?       @relation(fields: [alertId], references: [id])
  assessment      Assessment?  @relation(fields: [assessmentId], references: [id])
  assignedBy      User         @relation("TaskAssignedBy", fields: [assignedById], references: [id], onDelete: Cascade)
  assignedTo      User         @relation("TaskAssignedTo", fields: [assignedToId], references: [id], onDelete: Cascade)
  completedBy     User?        @relation("TaskCompletedBy", fields: [completedById], references: [id])
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  patient         Patient      @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([organizationId, assignedToId, status, dueDate], map: "task_assigned_status_due")
  @@index([organizationId, patientId, status], map: "task_patient_status")
  @@index([organizationId, dueDate, status], map: "task_due_status")
  @@index([alertId], map: "task_alert")
  @@index([assessmentId], map: "task_assessment")
  @@map("tasks")
}

model EncounterNote {
  id                String        @id @default(cuid())
  encounterType     EncounterType
  vitalsSnapshot    Json?
  assessmentSummary String?
  alertsSummary     String?
  subjective        String?
  objective         String?
  assessment        String?
  plan              String?
  additionalNotes   String?
  isLocked          Boolean       @default(false)
  attestedById      String?
  attestedAt        DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  organizationId    String
  patientId         String
  clinicianId       String
  alertId           String?
  alert             Alert?        @relation(fields: [alertId], references: [id])
  attestedBy        User?         @relation("AttestedEncounterNotes", fields: [attestedById], references: [id])
  clinician         Clinician     @relation(fields: [clinicianId], references: [id])
  organization      Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  patient           Patient       @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([patientId])
  @@index([clinicianId])
  @@index([encounterType])
  @@index([createdAt])
  @@index([isLocked])
  @@index([attestedById])
  @@index([alertId])
  @@map("encounter_notes")
}

model AssessmentReminder {
  id           String             @id @default(cuid())
  patientId    String
  templateId   String
  enrollmentId String
  reminderType ReminderType
  sentAt       DateTime
  dueAt        DateTime
  assessmentId String?
  completedAt  DateTime?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  enrollment   Enrollment         @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  patient      Patient            @relation(fields: [patientId], references: [id], onDelete: Cascade)
  template     AssessmentTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@index([patientId])
  @@index([templateId])
  @@index([enrollmentId])
  @@index([sentAt])
  @@index([dueAt])
  @@map("assessment_reminders")
}

model BillingProgram {
  id               String                   @id @default(cuid())
  name             String
  code             String                   @unique
  region           String
  payer            String?
  programType      String
  version          String
  effectiveFrom    DateTime
  effectiveTo      DateTime?
  isActive         Boolean                  @default(true)
  requirements     Json
  description      String?
  notes            String?
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime                 @default(now()) @updatedAt
  cptCodes         BillingCPTCode[]
  eligibilityRules BillingEligibilityRule[]
  enrollments      Enrollment[]

  @@index([region, programType])
  @@index([isActive])
  @@index([effectiveFrom, effectiveTo])
  @@index([code])
  @@map("billing_programs")
}

model BillingCPTCode {
  id                String         @id @default(cuid())
  billingProgramId  String
  code              String
  description       String
  category          String
  isRecurring       Boolean        @default(false)
  criteria          Json
  reimbursementRate Decimal?       @db.Decimal(10, 2)
  currency          String?        @default("USD")
  displayOrder      Int            @default(0)
  isActive          Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @default(now()) @updatedAt
  billingProgram    BillingProgram @relation(fields: [billingProgramId], references: [id], onDelete: Cascade)

  @@unique([billingProgramId, code])
  @@index([billingProgramId])
  @@index([code])
  @@index([category])
  @@index([isActive])
  @@map("billing_cpt_codes")
}

model BillingEligibilityRule {
  id               String         @id @default(cuid())
  billingProgramId String
  ruleName         String         @db.VarChar(200)
  ruleType         String
  priority         Int            @default(0)
  isRequired       Boolean        @default(true)
  ruleLogic        Json
  description      String?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt
  billingProgram   BillingProgram @relation(fields: [billingProgramId], references: [id], onDelete: Cascade)

  @@index([billingProgramId])
  @@index([ruleType])
  @@index([priority])
  @@map("billing_eligibility_rules")
}

model SavedView {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  name           String
  description    String?
  viewType       ViewType
  filters        Json
  displayConfig  Json?
  isShared       Boolean      @default(false)
  sharedWithIds  String[]     @default([])
  isDefault      Boolean      @default(false)
  usageCount     Int          @default(0)
  lastUsedAt     DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  isTemplate     Boolean      @default(false) @map("is_template")
  suggestedRole  String?      @map("suggested_role")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([organizationId])
  @@index([viewType])
  @@index([isShared])
  @@index([isTemplate])
  @@map("saved_views")
}

enum ValueType {
  numeric
  text
  boolean
  categorical
  ordinal
  date
  time
  datetime
  json
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SourceType {
  MANUAL
  DEVICE
  API
  IMPORT
}

enum EnrollmentStatus {
  PENDING
  ACTIVE
  INACTIVE
  COMPLETED
  WITHDRAWN
}

enum AlertStatus {
  PENDING
  ACKNOWLEDGED
  RESOLVED
  DISMISSED
}

enum InterventionType {
  PHONE_CALL
  VIDEO_CALL
  IN_PERSON_VISIT
  SECURE_MESSAGE
  MEDICATION_ADJUSTMENT
  REFERRAL
  PATIENT_EDUCATION
  CARE_COORDINATION
  MEDICATION_RECONCILIATION
  NO_PATIENT_CONTACT
}

enum PatientOutcome {
  IMPROVED
  STABLE
  DECLINED
  NO_CHANGE
  PATIENT_UNREACHABLE
}

enum CPTCode {
  CODE_99201
  CODE_99202
  CODE_99203
  CODE_99204
  CODE_99205
  CODE_99211
  CODE_99212
  CODE_99213
  CODE_99214
  CODE_99215
  CODE_99453
  CODE_99454
  CODE_99457
  CODE_99458
  CODE_99091
}

enum UserRole {
  ORG_ADMIN
  CLINICIAN
  NURSE
  BILLING_ADMIN
  PATIENT
  CAREGIVER
  RESEARCHER
}

enum OrganizationType {
  HOSPITAL
  CLINIC
  PRACTICE
  RESEARCH
  INSURANCE
  PHARMACY
  PLATFORM
}

enum SocialProvider {
  GOOGLE
  FACEBOOK
  APPLE
  MICROSOFT
}

enum ProgramType {
  PAIN_MANAGEMENT
  DIABETES
  HYPERTENSION
  MENTAL_HEALTH
  CARDIAC_REHAB
  GENERAL_WELLNESS
}

enum ObservationContext {
  WELLNESS
  PROGRAM_ENROLLMENT
  CLINICAL_MONITORING
  ROUTINE_FOLLOWUP
}

enum ReviewStatus {
  PENDING
  REVIEWED
  FLAGGED
}

enum ReviewMethod {
  MANUAL
  ALERT
  BULK
}

enum TaskType {
  FOLLOW_UP_CALL
  MED_REVIEW
  ADHERENCE_CHECK
  LAB_ORDER
  REFERRAL
  CUSTOM
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum EncounterType {
  RPM
  RTM
  CCM
  TCM
  GENERAL
}

enum Permission {
  USER_CREATE
  USER_READ
  USER_UPDATE
  USER_DELETE
  USER_INVITE
  USER_ROLE_ASSIGN
  PATIENT_CREATE
  PATIENT_READ
  PATIENT_UPDATE
  PATIENT_DELETE
  PATIENT_ASSIGN
  PATIENT_MEDICAL_RECORD_READ
  CLINICIAN_CREATE
  CLINICIAN_READ
  CLINICIAN_UPDATE
  CLINICIAN_DELETE
  CLINICIAN_ASSIGN
  ORG_CREATE
  ORG_READ
  ORG_UPDATE
  ORG_DELETE
  ORG_SETTINGS_MANAGE
  ORG_USERS_MANAGE
  ORG_BILLING_MANAGE
  PROGRAM_CREATE
  PROGRAM_READ
  PROGRAM_UPDATE
  PROGRAM_DELETE
  PROGRAM_ASSIGN
  ASSESSMENT_CREATE
  ASSESSMENT_READ
  ASSESSMENT_UPDATE
  ASSESSMENT_DELETE
  METRIC_CREATE
  METRIC_READ
  METRIC_UPDATE
  METRIC_DELETE
  OBSERVATION_CREATE
  OBSERVATION_READ
  OBSERVATION_UPDATE
  OBSERVATION_DELETE
  ALERT_CREATE
  ALERT_READ
  ALERT_UPDATE
  ALERT_DELETE
  ALERT_ACKNOWLEDGE
  MEDICATION_CREATE
  MEDICATION_READ
  MEDICATION_UPDATE
  MEDICATION_DELETE
  MEDICATION_PRESCRIBE
  REPORT_READ
  REPORT_CREATE
  ANALYTICS_READ
  SYSTEM_ADMIN
  AUDIT_READ
  BILLING_READ
  BILLING_MANAGE
  COMPLIANCE_READ
  TASK_CREATE
  TASK_READ
  TASK_UPDATE
  TASK_DELETE
  TASK_ASSIGN
  PLATFORM_ORG_CREATE
  PLATFORM_ORG_READ
  PLATFORM_ORG_UPDATE
  PLATFORM_ORG_DELETE
  PLATFORM_USER_MANAGE
  PLATFORM_BILLING_READ
  PLATFORM_BILLING_MANAGE
  PLATFORM_SUPPORT_READ
  PLATFORM_SUPPORT_MANAGE
  PLATFORM_ANALYTICS_READ
  PLATFORM_SETTINGS_MANAGE
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  SUSPENDED
  CANCELLED
  EXPIRED
}

enum SubscriptionTier {
  BASIC
  PRO
  ENTERPRISE
  CUSTOM
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  WAITING_CLIENT
  RESOLVED
  CLOSED
}

enum TicketCategory {
  TECHNICAL_SUPPORT
  BILLING
  FEATURE_REQUEST
  BUG_REPORT
  TRAINING
  GENERAL
}

enum ScheduledAssessmentStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  OVERDUE
  CANCELLED
}

enum ScheduledAssessmentFrequency {
  DAILY
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  AS_NEEDED
}

enum TimeLogSource {
  AUTO
  MANUAL
  ADJUSTED
}

enum ReminderType {
  UPCOMING
  OVERDUE
  ESCALATION
}

enum SuppressReason {
  FALSE_POSITIVE
  PATIENT_CONTACTED
  DUPLICATE_ALERT
  PLANNED_INTERVENTION
  PATIENT_HOSPITALIZED
  DEVICE_MALFUNCTION
  DATA_ENTRY_ERROR
  CLINICAL_JUDGMENT
  OTHER
}

enum ViewType {
  PATIENT_LIST
  TRIAGE_QUEUE
  ASSESSMENT_LIST
  ENROLLMENT_LIST
  ALERT_LIST
  TASK_LIST
}
