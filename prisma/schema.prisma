// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum ValueType {
  numeric
  text
  boolean
  categorical
  ordinal
  date
  time
  datetime
  json
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SourceType {
  MANUAL
  DEVICE
  API
  IMPORT
}

enum EnrollmentStatus {
  PENDING
  ACTIVE
  INACTIVE
  COMPLETED
  WITHDRAWN
}

enum AlertStatus {
  PENDING
  ACKNOWLEDGED
  RESOLVED
  DISMISSED
}

enum CPTCode {
  CODE_99201
  CODE_99202
  CODE_99203
  CODE_99204
  CODE_99205
  CODE_99211
  CODE_99212
  CODE_99213
  CODE_99214
  CODE_99215
}

enum UserRole {
  SUPER_ADMIN
  ORG_ADMIN
  CLINICIAN
  NURSE
  BILLING_ADMIN
  PATIENT
  CAREGIVER
  RESEARCHER
}

enum OrganizationType {
  HOSPITAL
  CLINIC
  PRACTICE
  RESEARCH
  INSURANCE
  PHARMACY
}

enum SocialProvider {
  GOOGLE
  FACEBOOK
  APPLE
  MICROSOFT
}

enum ProgramType {
  PAIN_MANAGEMENT
  DIABETES
  HYPERTENSION
  MENTAL_HEALTH
  CARDIAC_REHAB
  GENERAL_WELLNESS
}

enum ObservationContext {
  WELLNESS
  PROGRAM_ENROLLMENT
  CLINICAL_MONITORING
  ROUTINE_FOLLOWUP
}

enum Permission {
  USER_CREATE
  USER_READ
  USER_UPDATE
  USER_DELETE
  USER_INVITE
  USER_ROLE_ASSIGN
  PATIENT_CREATE
  PATIENT_READ
  PATIENT_UPDATE
  PATIENT_DELETE
  PATIENT_ASSIGN
  PATIENT_MEDICAL_RECORD_READ
  CLINICIAN_CREATE
  CLINICIAN_READ
  CLINICIAN_UPDATE
  CLINICIAN_DELETE
  CLINICIAN_ASSIGN
  ORG_CREATE
  ORG_READ
  ORG_UPDATE
  ORG_DELETE
  ORG_SETTINGS_MANAGE
  ORG_USERS_MANAGE
  ORG_BILLING_MANAGE
  PROGRAM_CREATE
  PROGRAM_READ
  PROGRAM_UPDATE
  PROGRAM_DELETE
  PROGRAM_ASSIGN
  ASSESSMENT_CREATE
  ASSESSMENT_READ
  ASSESSMENT_UPDATE
  ASSESSMENT_DELETE
  METRIC_CREATE
  METRIC_READ
  METRIC_UPDATE
  METRIC_DELETE
  OBSERVATION_CREATE
  OBSERVATION_READ
  OBSERVATION_UPDATE
  OBSERVATION_DELETE
  ALERT_CREATE
  ALERT_READ
  ALERT_UPDATE
  ALERT_DELETE
  ALERT_ACKNOWLEDGE
  MEDICATION_CREATE
  MEDICATION_READ
  MEDICATION_UPDATE
  MEDICATION_DELETE
  MEDICATION_PRESCRIBE
  REPORT_READ
  REPORT_CREATE
  ANALYTICS_READ
  SYSTEM_ADMIN
  AUDIT_READ
  BILLING_READ
  BILLING_MANAGE
  COMPLIANCE_READ
}

// Authentication Models
model User {
  id                    String              @id @default(cuid())
  email                 String              @unique
  passwordHash          String?
  firstName             String?
  lastName              String?
  avatar                String?
  phone                 String?
  isActive              Boolean             @default(true)
  emailVerified         DateTime?
  mfaEnabled            Boolean             @default(false)
  mfaSecret             String?
  backupCodes           String[]            @default([])
  lastLoginAt           DateTime?
  passwordResetToken    String?             @unique // ENHANCEMENT: Make unique
  passwordResetExpires  DateTime?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  
  // Relationships
  socialAccounts        SocialAccount[]
  userOrganizations     UserOrganization[]
  refreshTokens         RefreshToken[]
  auditLogs             AuditLog[]
  
  // ENHANCEMENT: Add indexes for common queries
  @@index([email])
  @@index([isActive])
  @@index([lastLoginAt])
  @@map("users")
}

model Organization {
  id                String              @id @default(cuid())
  name              String              @unique // ENHANCEMENT: Organization names should be unique
  type              OrganizationType
  email             String?             @unique // ENHANCEMENT: Organization emails should be unique
  phone             String?
  address           String?
  website           String?
  isActive          Boolean             @default(true)
  settings          Json?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  // Relationships
  userOrganizations UserOrganization[]
  carePrograms      CareProgram[]
  patients          Patient[]
  clinicians        Clinician[]
  enrollments       Enrollment[]
  
  // ENHANCEMENT: Add indexes
  @@index([name])
  @@index([type])
  @@index([isActive])
  @@map("organizations")
}

model UserOrganization {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           UserRole
  permissions    Permission[]
  isActive       Boolean      @default(true)
  joinedAt       DateTime     @default(now())
  
  // Relationships
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
  @@index([role])
  @@map("user_organizations")
}

model SocialAccount {
  id           String        @id @default(cuid())
  userId       String
  provider     SocialProvider
  providerId   String
  email        String?
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  // Relationships
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerId])
  @@index([userId])
  @@map("social_accounts")
}

model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

model CareProgram {
  id             String      @id @default(cuid())
  organizationId String
  name           String
  type           ProgramType
  description    String?
  isActive       Boolean     @default(true)
  settings       Json?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  
  // Relationships
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  enrollments    Enrollment[]
  
  // ENHANCEMENT: Unique program names per organization
  @@unique([organizationId, name])
  @@index([organizationId])
  @@index([type])
  @@index([isActive])
  @@map("care_programs")
}

model AuditLog {
  id             String    @id @default(cuid())
  userId         String?
  organizationId String?
  action         String
  resource       String?
  resourceId     String?
  ipAddress      String?
  userAgent      String?
  oldValues      Json?
  newValues      Json?
  metadata       Json?
  hipaaRelevant  Boolean   @default(false)
  createdAt      DateTime  @default(now())
  
  // Relationships
  user           User?     @relation(fields: [userId], references: [id])
  
  // ENHANCEMENT: Add indexes for audit queries
  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([createdAt])
  @@index([hipaaRelevant])
  @@map("audit_logs")
}

// Core Models
model Patient {
  id                  String               @id @default(cuid())
  organizationId      String
  firstName           String
  lastName            String
  dateOfBirth         DateTime
  gender              String?
  email               String?
  phone               String?
  address             String?
  emergencyContact    String?
  medicalRecordNumber String?              @unique
  insuranceInfo       Json?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  
  // Relationships
  organization        Organization         @relation(fields: [organizationId], references: [id])
  enrollments         Enrollment[]
  observations        Observation[]
  assessments         Assessment[]
  timeLogs            TimeLog[]
  alerts              Alert[]
  patientMedications  PatientMedication[]
  
  // ENHANCEMENT: Add composite unique constraint and indexes
  @@unique([organizationId, email]) // Unique email per organization
  @@index([organizationId])
  @@index([firstName, lastName])
  @@index([dateOfBirth])
  @@index([email])
  @@map("patients")
}

model Clinician {
  id               String       @id @default(cuid())
  organizationId   String
  firstName        String
  lastName         String
  email            String       @unique
  phone            String?
  address          String?
  licenseNumber    String?      @unique // ENHANCEMENT: License numbers should be unique
  specialization   String?
  department       String?
  credentials      String?
  emergencyContact String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  // Relationships
  organization     Organization @relation(fields: [organizationId], references: [id])
  enrollments      Enrollment[]
  observations     Observation[]
  assessments      Assessment[]
  timeLogs         TimeLog[]
  alerts           Alert[]
  
  // ENHANCEMENT: Add indexes
  @@index([organizationId])
  @@index([firstName, lastName])
  @@index([specialization])
  @@index([department])
  @@map("clinicians")
}

model Enrollment {
  id               String           @id @default(cuid())
  organizationId   String
  patientId        String
  clinicianId      String
  careProgramId    String
  conditionPresetId String?
  status           EnrollmentStatus @default(PENDING)
  startDate        DateTime
  endDate          DateTime?
  notes            String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  // Relationships
  organization     Organization     @relation(fields: [organizationId], references: [id])
  patient          Patient          @relation(fields: [patientId], references: [id])
  clinician        Clinician        @relation(fields: [clinicianId], references: [id])
  careProgram      CareProgram      @relation(fields: [careProgramId], references: [id])
  conditionPreset  ConditionPreset? @relation(fields: [conditionPresetId], references: [id])
  
  // ENHANCEMENT: Prevent duplicate enrollments
  @@unique([patientId, careProgramId, startDate])
  @@index([organizationId])
  @@index([patientId])
  @@index([clinicianId])
  @@index([status])
  @@index([startDate])
  @@map("enrollments")
}

model MetricDefinition {
  id                String        @id @default(cuid())
  key               String        @unique
  displayName       String        @unique // ENHANCEMENT: Display names should be unique
  description       String?
  unit              String?
  valueType         ValueType
  category          String?
  isStandardized    Boolean       @default(false)
  scaleMin          Decimal?
  scaleMax          Decimal?
  decimalPrecision  Int?
  options           Json?
  normalRange       Json?
  standardCoding    Json?
  validationInfo    Json?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Relationships
  observations      Observation[]
  templateItems     AssessmentTemplateItem[]
  
  // ENHANCEMENT: Add indexes
  @@index([key])
  @@index([displayName])
  @@index([category])
  @@index([valueType])
  @@index([isStandardized])
  @@map("metric_definitions")
}

model Observation {
  id               String           @id @default(cuid())
  organizationId   String
  patientId        String
  clinicianId      String?
  metricId         String
  value            Json
  unit             String?
  source           SourceType       @default(MANUAL)
  context          ObservationContext @default(CLINICAL_MONITORING)
  notes            String?
  recordedAt       DateTime         @default(now())
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relationships
  patient          Patient          @relation(fields: [patientId], references: [id])
  clinician        Clinician?       @relation(fields: [clinicianId], references: [id])
  metric           MetricDefinition @relation(fields: [metricId], references: [id])

  // ENHANCEMENT: Add composite unique constraint and indexes
  @@unique([patientId, metricId, recordedAt]) // Prevent duplicate observations
  @@index([organizationId])
  @@index([patientId])
  @@index([metricId])
  @@index([recordedAt])
  @@index([source])
  @@index([context])
  @@map("observations")
}

model AssessmentTemplate {
  id                String       @id @default(cuid())
  name              String       @unique // ENHANCEMENT: Template names should be unique
  description       String?
  questions         Json
  scoring           Json?
  isStandardized    Boolean      @default(false)
  category          String?
  standardCoding    Json?
  validationInfo    Json?
  scoringInfo       Json?
  copyrightInfo     String?
  clinicalUse       String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  // Relationships
  assessments       Assessment[]
  conditionPresetTemplates ConditionPresetTemplate[]
  items             AssessmentTemplateItem[]
  
  // ENHANCEMENT: Add indexes
  @@index([name])
  @@index([category])
  @@index([isStandardized])
  @@map("assessment_templates")
}

model AssessmentTemplateItem {
  id                  String             @id @default(cuid())
  templateId          String
  metricDefinitionId  String
  displayOrder        Int                @default(0)
  isRequired          Boolean            @default(false)
  helpText            String?
  defaultValue        String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  
  // Relationships
  template            AssessmentTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  metricDefinition    MetricDefinition   @relation(fields: [metricDefinitionId], references: [id])
  
  @@unique([templateId, metricDefinitionId])
  @@index([templateId])
  @@index([metricDefinitionId])
  @@index([displayOrder])
  @@map("assessment_template_items")
}

model Assessment {
  id               String             @id @default(cuid())
  patientId        String
  clinicianId      String?
  templateId       String
  responses        Json
  score            Json?
  completedAt      DateTime?
  notes            String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  
  // Relationships
  patient          Patient            @relation(fields: [patientId], references: [id])
  clinician        Clinician?         @relation(fields: [clinicianId], references: [id])
  template         AssessmentTemplate @relation(fields: [templateId], references: [id])
  
  // ENHANCEMENT: Add indexes
  @@index([patientId])
  @@index([templateId])
  @@index([completedAt])
  @@index([createdAt])
  @@map("assessments")
}

model TimeLog {
  id               String     @id @default(cuid())
  patientId        String
  clinicianId      String
  activity         String
  duration         Int
  cptCode          CPTCode?
  notes            String?
  billable         Boolean    @default(true)
  loggedAt         DateTime   @default(now())
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  
  // Relationships
  patient          Patient    @relation(fields: [patientId], references: [id])
  clinician        Clinician  @relation(fields: [clinicianId], references: [id])
  
  // ENHANCEMENT: Add indexes
  @@index([patientId])
  @@index([clinicianId])
  @@index([loggedAt])
  @@index([billable])
  @@index([cptCode])
  @@map("time_logs")
}

model ConditionPreset {
  id                    String                      @id @default(cuid())
  name                  String                      @unique
  defaultProtocolId     String?
  description           String?
  isActive              Boolean                     @default(true)
  isStandardized        Boolean                     @default(false)
  category              String?
  standardCoding        Json?
  clinicalGuidelines    Json?
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt
  
  // Relationships
  diagnoses             ConditionPresetDiagnosis[]
  templates             ConditionPresetTemplate[]
  alertRules            ConditionPresetAlertRule[]
  enrollments           Enrollment[]
  
  // ENHANCEMENT: Add indexes
  @@index([name])
  @@index([category])
  @@index([isStandardized])
  @@index([isActive])
  @@map("condition_presets")
}

model ConditionPresetDiagnosis {
  id                    String          @id @default(cuid())
  conditionPresetId     String
  icd10                 String
  snomed                String?
  label                 String
  isPrimary             Boolean         @default(false)
  
  // Relationships
  conditionPreset       ConditionPreset @relation(fields: [conditionPresetId], references: [id], onDelete: Cascade)
  
  // ENHANCEMENT: Add composite unique constraint
  @@unique([conditionPresetId, icd10])
  @@index([conditionPresetId])
  @@index([icd10])
  @@index([isPrimary])
  @@map("condition_preset_diagnoses")
}

model ConditionPresetTemplate {
  id                    String             @id @default(cuid())
  conditionPresetId     String
  templateId            String
  isRequired            Boolean            @default(true)
  frequency             String?
  displayOrder          Int                @default(0)
  
  // Relationships
  conditionPreset       ConditionPreset    @relation(fields: [conditionPresetId], references: [id], onDelete: Cascade)
  template              AssessmentTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  
  @@unique([conditionPresetId, templateId])
  @@index([conditionPresetId])
  @@index([templateId])
  @@index([displayOrder])
  @@map("condition_preset_templates")
}

model AlertRule {
  id                    String                      @id @default(cuid())
  name                  String                      @unique // ENHANCEMENT: Alert rule names should be unique
  description           String?
  conditions            Json
  actions               Json
  isActive              Boolean                     @default(true)
  isStandardized        Boolean                     @default(false)
  category              String?
  severity              Severity?
  priority              Int                         @default(0)
  standardCoding        Json?
  clinicalEvidence      Json?
  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt
  
  // Relationships
  alerts                Alert[]
  conditionPresets      ConditionPresetAlertRule[]
  
  // ENHANCEMENT: Add indexes
  @@index([name])
  @@index([category])
  @@index([isActive])
  @@index([isStandardized])
  @@index([severity])
  @@map("alert_rules")
}

model ConditionPresetAlertRule {
  id                    String          @id @default(cuid())
  conditionPresetId     String
  alertRuleId           String
  isEnabled             Boolean         @default(true)
  priority              Int             @default(0)
  
  // Relationships
  conditionPreset       ConditionPreset @relation(fields: [conditionPresetId], references: [id], onDelete: Cascade)
  rule                  AlertRule       @relation(fields: [alertRuleId], references: [id], onDelete: Cascade)
  
  @@unique([conditionPresetId, alertRuleId])
  @@index([conditionPresetId])
  @@index([alertRuleId])
  @@map("condition_preset_alert_rules")
}

model Alert {
  id          String      @id @default(cuid())
  organizationId String
  ruleId      String
  patientId   String
  clinicianId String?
  severity    Severity
  status      AlertStatus @default(PENDING)
  message     String
  data        Json?
  triggeredAt DateTime    @default(now())
  acknowledgedAt DateTime?
  resolvedAt  DateTime?

  // Relationships
  rule        AlertRule   @relation(fields: [ruleId], references: [id])
  patient     Patient     @relation(fields: [patientId], references: [id])
  clinician   Clinician?  @relation(fields: [clinicianId], references: [id])

  // ENHANCEMENT: Add indexes
  @@index([organizationId])
  @@index([patientId])
  @@index([ruleId])
  @@index([status])
  @@index([severity])
  @@index([triggeredAt])
  @@map("alerts")
}

model Drug {
  id                 String              @id @default(cuid())
  name               String              @unique // ENHANCEMENT: Drug names should be unique
  genericName        String?
  brandName          String?
  dosageForm         String?
  strength           String?
  manufacturer       String?
  ndcNumber          String?             @unique
  description        String?
  sideEffects        String[]
  contraindications  String[]
  interactions       String[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  
  // Relationships
  patientMedications PatientMedication[]
  
  // ENHANCEMENT: Add indexes
  @@index([name])
  @@index([genericName])
  @@index([brandName])
  @@map("drugs")
}

model PatientMedication {
  id                   String                @id @default(cuid())
  patientId            String
  drugId               String
  prescribedBy         String?
  dosage               String
  frequency            String
  route                String?
  startDate            DateTime
  endDate              DateTime?
  isActive             Boolean               @default(true)
  instructions         String?
  notes                String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  
  // Relationships
  patient              Patient               @relation(fields: [patientId], references: [id])
  drug                 Drug                  @relation(fields: [drugId], references: [id])
  medicationAdherence  MedicationAdherence[]
  
  // ENHANCEMENT: Add composite unique constraint and indexes
  @@unique([patientId, drugId, startDate]) // Prevent duplicate prescriptions
  @@index([patientId])
  @@index([drugId])
  @@index([isActive])
  @@index([startDate])
  @@map("patient_medications")
}

model MedicationAdherence {
  id                   String            @id @default(cuid())
  patientMedicationId  String
  takenAt              DateTime
  doseTaken            String?
  adherenceScore       Float?
  notes                String?
  recordedAt           DateTime          @default(now())
  
  // Relationships
  patientMedication    PatientMedication @relation(fields: [patientMedicationId], references: [id])
  
  // ENHANCEMENT: Add composite unique constraint and indexes
  @@unique([patientMedicationId, takenAt]) // Prevent duplicate adherence records
  @@index([patientMedicationId])
  @@index([takenAt])
  @@index([adherenceScore])
  @@map("medication_adherence")
}